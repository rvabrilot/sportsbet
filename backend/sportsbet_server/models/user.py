# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from sportsbet_server.models.base_model_ import Model
from sportsbet_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, nickname: str=None, email: str=None, md5: str=None, credit: float=None, role: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param nickname: The nickname of this User.  # noqa: E501
        :type nickname: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param md5: The md5 of this User.  # noqa: E501
        :type md5: str
        :param credit: The credit of this User.  # noqa: E501
        :type credit: float
        :param role: The role of this User   # noqa: E501
        :type role: str
        """
        self.swagger_types = {
            'id': str,
            'nickname': str,
            'email': str,
            'md5': str,
            'credit': float,
            'role': str
        }

        self.attribute_map = {
            'id': 'id',
            'nickname': 'nickname',
            'email': 'email',
            'md5': 'md5',
            'credit': 'credit',
            'role': 'role'
        }
        self._id = id
        self._nickname = nickname
        self._email = email
        self._md5 = md5
        self._credit = credit
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def nickname(self) -> str:
        """Gets the nickname of this User.


        :return: The nickname of this User.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname: str):
        """Sets the nickname of this User.


        :param nickname: The nickname of this User.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def md5(self) -> str:
        """Gets the md5 of this User.


        :return: The md5 of this User.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5: str):
        """Sets the md5 of this User.


        :param md5: The md5 of this User.
        :type md5: str
        """

        self._md5 = md5

    @property
    def credit(self) -> float:
        """Gets the credit of this User.


        :return: The credit of this User.
        :rtype: float
        """
        return self._credit

    @credit.setter
    def credit(self, credit: float):
        """Sets the credit of this User.


        :param credit: The credit of this User.
        :type credit: float
        """

        self._credit = credit
    
    @property
    def role(self) -> str:
        return self._role
    
    @role.setter
    def role(self, role: str):
        self._role = role
