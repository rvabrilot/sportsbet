# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from sportsbet_server.models.base_model_ import Model
from sportsbet_server.models.event import Event  # noqa: F401,E501
from sportsbet_server import util


class Bet(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, user_id: str=None, bet_datetime: str=None, bet_amount: float=None, events: List[Event]=None, status: str=None):  # noqa: E501
        """Bet - a model defined in Swagger

        :param id: The id of this Bet.  # noqa: E501
        :type id: str
        :param user_id: The user_id of this Bet.  # noqa: E501
        :type user_id: str
        :param bet_datetime: The bet_datetime of this Bet.  # noqa: E501
        :type bet_datetime: str
        :param bet_amount: The bet_amount of this Bet.  # noqa: E501
        :type bet_amount: float
        :param events: The events of this Bet.  # noqa: E501
        :type events: List[Event]
        :param status: The status of this Bet.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'id': str,
            'user_id': str,
            'bet_datetime': str,
            'bet_amount': float,
            'events': List[Event],
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'bet_datetime': 'bet_datetime',
            'bet_amount': 'bet_amount',
            'events': 'events',
            'status': 'status'
        }
        self._id = id
        self._user_id = user_id
        self._bet_datetime = bet_datetime
        self._bet_amount = bet_amount
        self._events = events
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Bet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bet of this Bet.  # noqa: E501
        :rtype: Bet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Bet.


        :return: The id of this Bet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Bet.


        :param id: The id of this Bet.
        :type id: str
        """

        self._id = id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Bet.


        :return: The user_id of this Bet.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Bet.


        :param user_id: The user_id of this Bet.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def bet_datetime(self) -> str:
        """Gets the bet_datetime of this Bet.


        :return: The bet_datetime of this Bet.
        :rtype: str
        """
        return self._bet_datetime

    @bet_datetime.setter
    def bet_datetime(self, bet_datetime: str):
        """Sets the bet_datetime of this Bet.


        :param bet_datetime: The bet_datetime of this Bet.
        :type bet_datetime: str
        """

        self._bet_datetime = bet_datetime

    @property
    def bet_amount(self) -> float:
        """Gets the bet_amount of this Bet.


        :return: The bet_amount of this Bet.
        :rtype: float
        """
        return self._bet_amount

    @bet_amount.setter
    def bet_amount(self, bet_amount: float):
        """Sets the bet_amount of this Bet.


        :param bet_amount: The bet_amount of this Bet.
        :type bet_amount: float
        """
        if bet_amount is None:
            raise ValueError("Invalid value for `bet_amount`, must not be `None`")  # noqa: E501

        self._bet_amount = bet_amount

    @property
    def events(self) -> List[Event]:
        """Gets the events of this Bet.


        :return: The events of this Bet.
        :rtype: List[Event]
        """
        return self._events

    @events.setter
    def events(self, events: List[Event]):
        """Sets the events of this Bet.


        :param events: The events of this Bet.
        :type events: List[Event]
        """

        self._events = events

    @property
    def status(self) -> str:
        """Gets the status of this Bet.

        bet status  # noqa: E501

        :return: The status of this Bet.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Bet.

        bet status  # noqa: E501

        :param status: The status of this Bet.
        :type status: str
        """
        allowed_values = ["placed", "win", "lose"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
